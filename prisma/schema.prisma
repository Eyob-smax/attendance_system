

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  user_id       Int       @id @default(autoincrement())
  username      String    @unique @db.VarChar(50)
  password_hash String    @db.VarChar(255)
  role          String    @db.VarChar(20) 
  email         String?   @unique @db.VarChar(100)
  attendances   Attendance[] 
}

model Batch {
  batch_id     Int       @id @default(autoincrement())
  batch_name   String    @unique @db.VarChar(50)
  start_date   DateTime  @db.Date
  end_date     DateTime? @db.Date
  is_completed Boolean?   @default(false)
  students     Student[]
  course_dates CourseDate[]
  certificates Certificate[]
}

model users {
  id    Int     @id @default(autoincrement())
  username String
  password String
  email String @unique
}

model employee{
  id        Int      @id @default(autoincrement())
  name      String   
  email     String   @unique
  role      ROLE_TYPE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ROLE_TYPE {
  ADMIN
  INTERN
  ENGINEER
}

model Student {
  student_id         Int       @id @default(autoincrement())
  first_name         String    @db.VarChar(50)
  last_name          String    @db.VarChar(50)
  email              String    @unique @db.VarChar(100)
  phone_number       String?   @unique @db.VarChar(20)  
  enrollment_date    DateTime  @default(now()) @db.Date
  is_certified       Boolean   @default(false)
  has_consented      Boolean   @default(false) 
  current_batch_id   Int?
  current_batch      Batch?     @relation(fields: [current_batch_id], references: [batch_id], onDelete: SetNull, onUpdate: Cascade)
  attendances        Attendance[]
  certificate        Certificate?
}

model Course {
  course_id    Int       @id @default(autoincrement())
  course_name  String    @db.VarChar(100)
  description  String?   @db.Text @default("none")
  course_dates CourseDate[]
}

model CourseDate {
  date_id    Int      @id @default(autoincrement())
  class_date DateTime @db.Date
  start_time DateTime?  @db.Time(0) 
  course_id  Int
  course     Course   @relation(fields: [course_id], references: [course_id], onDelete: Restrict, onUpdate: Cascade)
  batch_id   Int
  batch      Batch    @relation(fields: [batch_id], references: [batch_id], onDelete: Restrict, onUpdate: Cascade)
  @@unique([batch_id, course_id, class_date])
  attendances Attendance[]
}

model Attendance {
  attendance_id          BigInt    @id @default(autoincrement())
  is_present             Boolean
  recorded_at            DateTime  @default(now()) @db.Timestamptz()
  student_id             Int
  student                Student   @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: Cascade)
  date_id                Int
  course_date            CourseDate @relation(fields: [date_id], references: [date_id], onDelete: Restrict, onUpdate: Cascade)
  recorded_by_user_id    Int?
  recorded_by            User?     @relation(fields: [recorded_by_user_id], references: [user_id], onDelete: SetNull, onUpdate: Cascade)

  @@unique([student_id, date_id])
  @@map("Attendance")
}

model Certificate {
  certificate_id Int      @id @default(autoincrement())
  date_issued    DateTime @default(now()) @db.Date
  certificate_url String?  @db.VarChar(255)

  student_id     Int      @unique
  student        Student  @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: Cascade)

  batch_id       Int
  batch          Batch    @relation(fields: [batch_id], references: [batch_id], onDelete: Restrict, onUpdate: Cascade)
}